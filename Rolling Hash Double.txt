struct RollingHash {
    static const int base1 = 1007, base2 = 2009;
    static const int mod1 = 1000000007, mod2 = 1000000009;
    vector<long long> hash1, hash2, power1, power2;

    // construct
    RollingHash(string S) {
        S = ' ' + S;
        int n = (int)S.size();
        hash1.assign(n, 0);
        hash2.assign(n, 0);
        power1.assign(n, 1);
        power2.assign(n, 1);
        for(int i = 1; i < n; ++i) {
            hash1[i] = (hash1[i - 1] * base1 + S[i]) % mod1;
            hash2[i] = (hash2[i - 1] * base2 + S[i]) % mod2;
            power1[i] = (power1[i - 1] * base1) % mod1;
            power2[i] = (power2[i - 1] * base2) % mod2;
        }
    }

    // get hash of S[left:right]
    inline pair<long long, long long> Get(int l, int r) const {
        long long res1 = hash1[r] - hash1[l - 1] * power1[r - l + 1] % mod1;
        if (res1 < 0) res1 += mod1;
        long long res2 = hash2[r] - hash2[l - 1] * power2[r - l + 1] % mod2;
        if (res2 < 0) res2 += mod2;
        return {res1, res2};
    }
};