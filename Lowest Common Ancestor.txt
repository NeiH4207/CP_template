struct log_lca {
    int n = 0;
    vector<int> parent, depth, subtree_size;
    vector<vector<int>> adj;
    vector<vector<int>> ancestor;
 
    log_lca(int _n = 0) {
        init(_n);
    }
 
    // Warning: this does not call build().
    log_lca(const vector<vector<int>> &_adj) {
        init(_adj);
    }
 
    void init(int _n) {
        n = _n;
        parent.resize(n);
        depth.resize(n);
        subtree_size.resize(n);
        adj.assign(n, {});
    }
 
    // Warning: this does not call build().
    void init(const vector<vector<int>> &_adj) {
        init(_adj.size());
        adj = _adj;
    }
 
    static int largest_bit(int x) {
        return 31 - __builtin_clz(x);
    }
 
    void add_edge(int a, int b) {
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
 
    void dfs(int node, int par) {
        parent[node] = par;
        depth[node] = par < 0 ? 0 : depth[par] + 1;
        subtree_size[node] = 1;
 
        for (int neighbor : adj[node])
            if (neighbor != par) {
                dfs(neighbor, node);
                subtree_size[node] += subtree_size[neighbor];
            }
    }
 
    void build() {
        parent.assign(n, -1);
 
        for (int i = 0; i < n; i++)
            if (parent[i] < 0)
                dfs(i, -1);
 
        ancestor.assign(largest_bit(n) + 1, vector<int>(n));
 
        if (n > 0)
            ancestor[0] = parent;
 
        for (int k = 0; k < largest_bit(n); k++)
            for (int i = 0; i < n; i++)
                ancestor[k + 1][i] = ancestor[k][i] < 0 ? -1 : ancestor[k][ancestor[k][i]];
    }
 
    pair<int, int> find_farthest(int node, int par, int path) const {
        pair<int, int> current = {path, node};
 
        for (int neighbor : adj[node])
            if (neighbor != par)
                current = max(current, find_farthest(neighbor, node, path + 1));
 
        return current;
    }
 
    pair<int, pair<int, int>> get_diameter() const {
        int u = find_farthest(0, -1, 0).second;
        pair<int, int> farthest = find_farthest(u, -1, 0);
        int v = farthest.second;
        return {farthest.first, {u, v}};
    }
 
    int get_kth_ancestor(int v, int k) const {
        for (int i = 0; 1 << i <= k; i++)
            if (k >> i & 1) {
                v = ancestor[i][v];
 
                if (v < 0)
                    break;
            }
 
        return v;
    }
 
    // Note: returns -1 if `a` and `b` aren't connected.
    int get_lca(int a, int b) const {
        if (depth[a] > depth[b])
            swap(a, b);
 
        b = get_kth_ancestor(b, depth[b] - depth[a]);
 
        if (a == b)
            return a;
 
        assert(a != b && depth[a] == depth[b]);
 
        for (int k = largest_bit(depth[a]); k >= 0; k--)
            if (ancestor[k][a] != ancestor[k][b]) {
                a = ancestor[k][a];
                b = ancestor[k][b];
            }
 
        assert(parent[a] == parent[b]);
        return parent[a];
    }
 
    bool is_ancestor(int a, int b) const {
        return depth[a] <= depth[b] && get_kth_ancestor(b, depth[b] - depth[a]) == a;
    }
 
    bool on_path(int x, int a, int b) const {
        int anc = get_lca(a, b);
        return is_ancestor(anc, x) && (is_ancestor(x, a) || is_ancestor(x, b));
    }
 
    int get_dist(int a, int b) const {
        return depth[a] + depth[b] - 2 * depth[get_lca(a, b)];
    }
 
    int get_kth_node_on_path(int a, int b, int k) const {
        int anc = get_lca(a, b);
        int first_half = depth[a] - depth[anc];
        int second_half = depth[b] - depth[anc];
        assert(0 <= k && k <= first_half + second_half);
 
        if (k < first_half)
            return get_kth_ancestor(a, k);
        else
            return get_kth_ancestor(b, first_half + second_half - k);
    }
 
    // Returns the child of `a` that is an ancestor of `b`. Assumes `a` is a strict ancestor of `b`.
    int child_ancestor(int a, int b) const {
        assert(a != b);
        assert(is_ancestor(a, b));
        int child = get_kth_ancestor(b, depth[b] - depth[a] - 1);
        assert(is_ancestor(child, b));
        return child;
    }
};
 